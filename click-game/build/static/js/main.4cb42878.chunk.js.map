{"version":3,"sources":["components/Wrapper/index.js","components/ImageCard/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","count","top","guesses","children","ImageCard","id","animate","onClick","imageClick","src","imageUrl","alt","name","Navbar","App","state","countTop","images","score","_this","lose","updatedImages","map","image","imageClone","Object","objectSpread","clicked","console","log","setState","gameReset","topScore","resetImages","handleShuffle","shuffledImages","array","i","length","j","Math","floor","random","_ref","shuffleImages","_this2","this","components_Navbar","components_Wrapper","components_ImageCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cb42878.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props){\n        return <div className=\"wrapper\">\n        <div className=\"container instructions\">\n        <p>Click on a picture to start the game.  Keep clicking on pictures but don't click on the same picture twice or you'll lose! </p>\n        <div className=\"divider\"></div>\n        <div className=\"row\">\n        <div className=\"col s6\">Score: {props.count}</div>\n        <div className=\"col s6\">Top Score: {props.top}</div>\n        <div className=\"divider\"></div>\n        </div>\n        <div className=\"row\">{props.guesses}</div>\n        </div>\n        {props.children}\n        \n        </div>\n    }\n\nexport default Wrapper","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props){\n    return (\n        <div className=\"image-container\">\n            <img className=\"z-depth-3\" id={props.animate} onClick={()=>props.imageClick(props.id)} src={props.imageUrl} alt={props.name}/>\n        </div>\n    )\n}\n\nexport default ImageCard;","import React from \"react\"\nimport \"./style.css\"\n\nfunction Navbar(props){\n    return (\n    <nav>\n    <div className=\"nav-wrapper blue darken-4\">\n      <div className=\"brand-logo center\">Clicky Game</div>\n    </div>\n    </nav>\n    )\n}\n\nexport default Navbar","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper'\nimport ImageCard from \"./components/ImageCard\";\nimport Navbar from \"./components/Navbar\"\nimport images from \"./images.json\"\n\nfunction shuffleImages(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends React.Component {\n\n  state ={\n    count: 0,\n    countTop: 0,\n    images,\n    guesses: \"\",\n  }\n\n  imageClick = id => {\n    let score = this.state.count\n    let lose = false\n    const updatedImages = this.state.images.map(image => {\n      const imageClone = {...image}\n      if(id === image.id){\n        // console.log(imageClone)\n        if(imageClone.clicked === false){\n          imageClone.clicked = true;\n          score++;\n        }else if (imageClone.clicked === true){\n          lose = true;\n        }\n      }\n      return imageClone\n    })\n    console.log(updatedImages)\n    console.log(score)\n    if(score === 12){\n      this.setState({guesses: \"You win! Click an image to play again.\"})\n      this.gameReset();\n    }\n    if(lose === false){\n    this.setState({images: updatedImages, count: score, guesses: \"You guessed correctly!\"})\n    }else {\n      console.log(\"game has been reset\")\n      this.gameReset()}\n  }\n\n  gameReset = () => {\n    //reset count to 0, compare count to countTop and update high score, update image array - all in one this.setState\n    //variable for images\n    let score = this.state.count;\n    let topScore = this.state.countTop;\n    const resetImages = this.state.images.map(image => {\n    const imageClone = {...image, clicked: false};\n    return imageClone;\n    })\n  \n    if(score === 12){\n      this.setState({image: resetImages, countTop: 12, count: 0, guesses: \"You win! Click to play again.\"});\n    }else if(score > topScore){\n      this.setState({images: resetImages, countTop: score, count: 0, guesses: \"You already clicked that one. Try again!\"})\n    }else if (score < topScore) {\n    this.setState({images: resetImages, count: 0, guesses: \"You already clicked that one. Try again!\"})\n    }\n    this.handleShuffle();\n  }\n\n  handleShuffle = () => {\n    let shuffledImages = shuffleImages(images);\n    this.setState({ images: shuffledImages });\n  };\n\n  render (){\n    return(\n      <div>\n      <Navbar />\n      <Wrapper count={this.state.count} top={this.state.countTop} guesses={this.state.guesses}>\n      {this.state.images.map(image => (\n        <ImageCard\n          clicked={this.clicked}\n          id={image.id}\n          key={image.id}\n          name={image.name}\n          imageUrl={image.image}\n          imageClick={this.imageClick}\n          />\n        )\n      )}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}